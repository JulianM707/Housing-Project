geom_point(alpha = 0.5) +
labs(title = "Scatter Plot of Sale Price vs. Pool Area",
x = "Pool Area in Square Feet", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = MiscVal, y = SalePrice)) +
geom_point(alpha = 0.5) +
labs(title = "Scatter Plot of Sale Price vs. Miscellaneous Feature Value",
x = "Value of Miscellaneous Feature in Dollars", y = "Sale Price") +
theme_bw()
##5 Create box plots for qualitative variables
# load required packages
library(ggplot2)
##5 Create box plots for qualitative variables
# load required packages
library(ggplot2)
# create box plots for each categorical variable
ggplot(train, aes(x = factor(MSSubClass), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Building Class",
x = "Building Class", y = "Sale Price") +
theme_bw()
##Linear Regression Model
# Define the predictor variables
predictors <- c("LotArea", "OverallQual", "OverallCond", "YearBuilt", "BsmtFinSF1",
"BsmtFinSF2", "X1stFlrSF", "X2ndFlrSF", "TotRmsAbvGrd", "PoolArea","Neighborhood",
"RoofMatl", "ExterQual", "KitchenQual")
# Fit the linear regression model
model1 <- lm(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
# Summarize the model results
summary(model1)
# Make predictions
predictions <- model1 %>% predict(train_V)
# Model performance
# (a) Compute the prediction error, RMSE
RMSE(predictions, Actuals)
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(rpart)
model2 <- rpart(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
# Print the summary of the model
summary(model2, digits = 4)
# Plot the decision tree
plot(model2)
text(model2, use.n = TRUE, all = TRUE, cex = 0.8)
# Make predictions
predictions2 <- model2 %>% predict(train_V)
# Model performance
# (a) Compute the prediction error, RMSE
RMSE(predictions2, Actuals)
#Model 3
# Load the randomForest package
library(randomForest)
# Build the random forest model
model3 <- randomForest(formula = SalePrice ~ .,
data = train %>% dplyr::select(SalePrice, all_of(predictors)),
ntree = 500, mtry = 4, importance = TRUE)
# Print the model summary
print(model3)
plot(model3)
train <- read.csv("train.csv")
table(train$Neighborhood)
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw()
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
na_cols2 <- colSums(is.na(test)) > 0
##Load data
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
train<-train %>% dplyr::select(-na_cols_names)
## Split traing and cross validation set
library(MASS)
data(train)
n= dim(train)[1]
set.seed(1251)
train.index = sample(n, 0.8*n)
train = train[train.index, ]
train_V = train[-train.index, ]
Actuals = train_V$SalePrice
train_V <-train_V %>% dplyr::select(-SalePrice)
# Define the predictor variables
predictors <- c("LotArea", "OverallQual", "OverallCond", "YearBuilt", "BsmtFinSF1",
"BsmtFinSF2", "X1stFlrSF", "X2ndFlrSF", "TotRmsAbvGrd", "PoolArea","Neighborhood",
"RoofMatl", "ExterQual", "KitchenQual")
# Fit the linear regression model
model1 <- aov(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
# Make predictions
predictions <- model1 %>% predict(train_V)
# Model performance
# (a) Compute the prediction error, RMSE
RMSE(predictions, Actuals)
model1 <- lm(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
model1 <- aov(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
# Load the randomForest package
library(randomForest)
# Build the random forest model
model3 <- randomForest(formula = SalePrice ~ .,
data = train %>% dplyr::select(SalePrice, all_of(predictors)),
ntree = 500, mtry = 4, importance = TRUE)
# Print the model summary
print(model3)
plot(model3)
# Compute the model performance (RMSE)
RMSE(predictions3, Actuals)
predictions3 <- predict(model3, train_V)
# Compute the model performance (RMSE)
RMSE(predictions3, Actuals)
model1 <- lm(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
library(ggplot2)
# create box plots for each categorical variable
ggplot(train, aes(x = factor(MSSubClass), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Building Class",
x = "Building Class", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(MSZoning), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. General Zoning Classification",
x = "General Zoning Classification", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Street), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Road Access",
x = "Type of Road Access", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(LotShape), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. General Shape of Property",
x = "General Shape of Property", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(LandContour), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Flatness of Property",
x = "Flatness of Property", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Utilities), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Utilities Available",
x = "Type of Utilities Available", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = LandSlope, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Slope of Property",
x = "Slope of Property", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw() +
theme(text = element_text(size = 10))
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw() +
theme(text = element_text(size = 1))
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw() +
theme(text = element_text(size = 5))
ggplot(train, aes(x = Neighborhood, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Neighborhood",
x = "Neighborhood", y = "Sale Price") +
theme_bw() +
theme(text = element_text(size = 8))
ggplot(train, aes(x = Condition1, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Proximity to Main Road or Railroad (Condition 1)",
x = "Proximity to Main Road or Railroad", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = Condition2, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Proximity to Main Road or Railroad (Condition 2)",
x = "Proximity to Main Road or Railroad", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = BldgType, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Dwelling",
x = "Type of Dwelling", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = HouseStyle, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Style of Dwelling",
x = "Style of Dwelling", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = RoofStyle, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Roof",
x = "Type of Roof", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = RoofMatl, y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Roof Material",
x = "Roof Material", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Exterior1st), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Exterior Covering on House",
x = "Exterior Covering on House", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Exterior2nd), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Exterior Covering on House (If More Than One Material)",
x = "Exterior Covering on House (If More Than One Material)", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(ExterQual), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Exterior Material Quality",
x = "Exterior Material Quality", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(ExterCond), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Present Condition of the Material on the Exterior",
x = "Present Condition of the Material on the Exterior", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Foundation), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Foundation",
x = "Type of Foundation", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(HeatingQC), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Heating Quality and Condition",
x = "Heating Quality and Condition", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(CentralAir), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Central Air Conditioning",
x = "Central Air Conditioning", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(CentralAir), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Central Air Conditioning",
x = "Central Air Conditioning", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(KitchenQual), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Kitchen Quality",
x = "Kitchen Quality", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(Functional), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Home Functionality Rating",
x = "Home Functionality Rating", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(PavedDrive), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Paved Driveway",
x = "Paved Driveway", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(SaleType), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Type of Sale",
x = "Type of Sale", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(SaleCondition), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Condition of Sale",
x = "Condition of Sale", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(MoSold), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Month Sold",
x = "Month Sold", y = "Sale Price") +
theme_bw()
ggplot(train, aes(x = factor(YrSold), y = SalePrice)) +
geom_boxplot(alpha = 0.5) +
labs(title = "Box Plot of Sale Price vs. Year Sold",
x = "Year Sold", y = "Sale Price") +
theme_bw()
# Fit the linear regression model
model1 <- lm(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
model1 <- aov(SalePrice ~ ., data = train %>% dplyr::select(SalePrice, all_of(predictors)))
# Summarize the model results
summary(model1)
#Model 3
# Load the randomForest package
library(randomForest)
# Build the random forest model
model3 <- randomForest(formula = SalePrice ~ .,
data = train %>% dplyr::select(SalePrice, all_of(predictors)),
ntree = 500, mtry = 4, importance = TRUE)
##Load data
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
train<-train %>% dplyr::select(-na_cols_names)
## Split traing and cross validation set
library(MASS)
data(train)
n= dim(train)[1]
set.seed(1251)
train.index = sample(n, 0.8*n)
train = train[train.index, ]
train_V = train[-train.index, ]
Actuals = train_V$SalePrice
train_V <-train_V %>% dplyr::select(-SalePrice)
##Load data
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
train<-train %>% dplyr::select(-na_cols_names)
## Split traing and cross validation set
library(MASS)
data(train)
n= dim(train)[1]
set.seed(1251)
train.index = sample(n, 0.8*n)
train = train[train.index, ]
train_V = train[-train.index, ]
Actuals = train_V$SalePrice
train_V <-train_V %>% dplyr::select(-SalePrice)
##Load data
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
train<-train %>% dplyr::select(-na_cols_names)
## Split traing and cross validation set
library(MASS)
data(train)
n= dim(train)[1]
set.seed(1251)
train.index = sample(n, 0.8*n)
train = train[train.index, ]
train_V = train[-train.index, ]
Actuals = train_V$SalePrice
train_V <-train_V %>% dplyr::select(-SalePrice)
# Load the randomForest package
library(randomForest)
# Build the random forest model
model3 <- randomForest(formula = SalePrice ~ .,
data = train %>% dplyr::select(SalePrice, all_of(predictors)),
ntree = 500, mtry = 4, importance = TRUE)
# Print the model summary
print(model3)
plot(model3)
#Variable Importance
varImpPlot(model3)
predictions3 <- predict(model3, train_V)
# Compute the model performance (RMSE)
RMSE(predictions3, Actuals)
#Variable Importance
varImpPlot(model3)
##Load data
library(caret)
library(tidyverse)
train <- read.csv("train.csv")
# Check which columns have NAs
na_cols <- colSums(is.na(train)) > 0
na_cols_names <- names(na_cols[na_cols])
na_cols_names
train<-train %>% dplyr::select(-na_cols_names)
## Split traing and cross validation set
library(MASS)
data(train)
n= dim(train)[1]
set.seed(1251)
train.index = sample(n, 0.8*n)
train = train[train.index, ]
train_V = train[-train.index, ]
Actuals = train_V$SalePrice
train_V <-train_V %>% dplyr::select(-SalePrice)
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(rpart)
model2 <- rpart(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
# Print the summary of the model
summary(model2, digits = 4)
# Plot the decision tree
plot(model2)
text(model2, use.n = TRUE, all = TRUE, cex = 0.8)
library(tree)
tree_model <- tree(SalePrice ~ ., data = train)
tree_model
plot(tree_model)
text(tree_model)
summary(tree_model)
library(tree)
tree_model <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
tree_model
plot(tree_model)
text(tree_model)
summary(tree_model)
library(tree)
model2 <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
model2
plot(tree_model)
text(tree_model)
summary(tree_model)
# Make predictions
predictions2 <- model2 %>% predict(train_V)
# Model performance
# (a) Compute the prediction error, RMSE
RMSE(predictions2, Actuals)
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(tree)
model2 <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(tree)
model2 <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(tree)
model2 <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
model2
##Model 2
library(rpart)
# Define the response variable
response <- "SalePrice"
# Build the decision tree model
# Fit the decision tree model
library(tree)
model2 <- tree(formula = as.formula(paste(response, "~", paste(predictors, collapse = "+"))),
data = train)
model2
plot(model2)
text(model2, use.n = TRUE, all = TRUE, cex = 0.8)
plot(model2)
text(model2, use.n = TRUE, all = TRUE, cex = 0.8)
plot(model2)
model2
plot(model2)
text(model2)
summary(model2)
plot(model2)
text(model2, use.n = TRUE, all = TRUE, cex = 0.8)
plot(model2)
plot(model2)
text(model2)
# Print the summary of the model
summary(model2)
print(model3)
plot(model3)
plot(model2)
text(model2)
# Print the summary of the model
summary(model2)
